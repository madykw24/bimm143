---
title: "Class07 Lab"
author: "Mady Welch"
format: pdf
---

## K-means clustering

First we will test how this method works in R with some made up data.

```{r}
x <- rnorm(10000)
hist(x)
```

Let's make some numbers centered on -3 and +3

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, 3))

x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now let's see how `kmeans()` works with this data 

```{r}
km <- kmeans(x, centers = 2, nstart = 20)
km
```

```{r}
km$centers
```

>Q. How many points are in each cluster? 

```{r}
km$size
```

>Q. What 'component' of your result object details: 
  - cluster assignment/membership?
  - cluster center?

```{r}
km$cluster
```

```{r}
km$centers
```

>Q. Plot x by the kmeans cluster assignment and add cluster centers as blue points

```{r}
plot(x, col = km$cluster)
points(km$centers, col = "blue", pch = 15, cex = 1.5)
```


## Hierarchal Clustering

The `hclust()` function in R performs hierarchal clustering.

The `hclust()` function requires an input distance matrix, which I can get from the `dist()` function. 

```{r}
hc <-  hclust(dist(x))
hc
```

There is a plot() method for hclust objects...

```{r}
plot(hc)
```

Now to get my cluster membership vector I need to "cut" the tree to yield separate "branches" with the "leaves" on each brach being our cluster. 
To do this we use the `cutree()` function. 

```{r}
cutree(hc, h = 8)
```

Use `cutree()` with a k = 2 

```{r}
grps <- cutree(hc, k = 2)
```

A plot of our data colored by our hclust grps

```{r}
plot(x, col = grps)
```


## Principal Component Analysis(PCA)


```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

-------------------------------------------
>Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
dim(x)
```
- 17 rows and 5 columns 
-------------------------------------------

It is always a good idea to examine your imported data to make sure it meets your expectations. 

```{r}
head(x)
```

Change the "x" column to rownames: 

```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

```{r}
dim(x)
```
- Now there are 17 rows and 4 columns


OR we could use `read.csv(url, row.names=1)` 
```{r}
x <- read.csv(url, row.names=1)
head(x)
```


>Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances? 

- The second method is the better way to do it so we don't accidentally delete a column every time we call for x 


Barplot of the data: 
```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```


>Q3: Changing what optional argument in the above barplot() function results in the following plot?

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

- If we change the beside argument to equal FALSE it will create the stacked plot

>Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot? 

```{r}
pairs(x, col=rainbow(10), pch=16)
```
- If points lie on the diagonal that means they are the same 

While this plot is kind of useful, it is difficult to interperet. 


>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set? 

- N. Ireland points deviate from the diagonal more than other countries. 


## PCA to the rescue 

Principal Component Analysis can be a big help in these cases where we have lots of things that are being measured in a dataset. 

The main PCA function in base R is called `prcomp()` 


The `prcomp()` function wants as input the transpose of our food matrix/table/data.frame, so we use `t()`
```{r}
pca <- prcomp(t(x))
summary(pca)
```

The above results shows that PCA captures 67% of the total variance in the original data in one PC and 96.5% in two PCs. 

```{r}
attributes(pca)
```

```{r}
head(pca$x)
```

**Let's plot our main results.** 

>Q7. Generate a plot of PC1 vs PC2
>Q8. Customize your plot so that the colors of the points match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[, 1], pca$x[, 2], col = c("orange", "red", "blue", "darkgreen"))
```


>Q9. Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```


# Biplots 

```{r}
biplot(pca)
```

## PCA of RNA-seq data 

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

>Q10: How many genes and samples are in this data set?

```{r}
dim(rna.data)
```
- 100 rows and 10 columns


PCA and plot the results: 
```{r}
pca <- prcomp(t(rna.data), scale=TRUE)
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```
- PC1 captures 92.6% of the original variance. 

Let's make a plot: 
```{r}
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```
- Once again shows that PC1 captures most of the variance. 

We can make the plot a bit more useful: 
```{r}
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```

##Using ggplot 

We could use ggplot2 here but we will first need a data.frame as input for the main ggplot() function. This data.frame will need to contain our PCA results and additional columns for any aesthetic mappings. 

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()
```

- If we want to add a condition specific color or labels for wild-type and knock-out sample we need to add this information to the data.frame 

```{r}
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p
```

Now we can add a few more labels: 
```{r}
p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()
```














